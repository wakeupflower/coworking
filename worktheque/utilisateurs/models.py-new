from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils import timezone


# Enum-like class for role choices
class Role(models.TextChoices):
    USER = 'utilisateur', 'Utilisateur'
    ADMIN = 'admin', 'Admin'
    SUPERADMIN = 'superadmin', 'Superadmin'


class User(AbstractUser):
    """
    Custom User model that extends Django's AbstractUser to include additional fields.
    """
    prenom = models.CharField(max_length=100)
    nom = models.CharField(max_length=100)
    telephone = models.CharField(max_length=15, blank=True, null=True)
    statut_abonnement = models.BooleanField(default=False)  # Subscription status
    role = models.CharField(
        max_length=20,
        choices=Role.choices,
        default=Role.USER,
    )

    # Custom related_name to avoid reverse accessor conflicts
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='utilisateur_set',  # Change related_name to avoid clash
        blank=True
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='utilisateur_permissions',  # Change related_name to avoid clash
        blank=True
    )


class Entreprise(models.Model):
    """
    Represents a company that can employ users.
    """
    nom = models.CharField(max_length=255)
    adresse = models.CharField(max_length=255)
    siret = models.CharField(max_length=14, unique=True)  # SIRET number (unique)
    telephone = models.CharField(max_length=15)

    def __str__(self):
        return self.nom


class Workspace(models.Model):
    """
    Represents a workspace available for reservation.
    """
    TYPE_CHOICES = [
        ('bureau_individuel', 'Bureau individuel'),
        ('bureau_2_5', 'Bureau 2-5 personnes'),
        ('open_space', 'Open Space'),
        ('salle_reunion', 'Salle de réunion'),
    ]

    # Image field to store workspace images
    image = models.ImageField(upload_to='static/workspace_images/', blank=True, null=True)

    nom = models.CharField(max_length=255)
    type = models.CharField(max_length=20, choices=TYPE_CHOICES)
    capacite = models.IntegerField()  # Capacity of the workspace
    adresse = models.CharField(max_length=255)  # Address of the workspace
    disponibilite = models.BooleanField(default=True)

    def __str__(self):
        return self.nom

    def verifier_disponibilite(self):
        return self.disponibilite


class MembrePremium(models.Model):
    """
    Represents premium members with discounts.
    """
    utilisateur = models.OneToOneField(User, on_delete=models.CASCADE)
 
    def __str__(self):
        return f"{self.utilisateur.prenom} {self.utilisateur.nom} (Premium)"


class Tarification(models.Model):
    """
    Pricing model for different workspaces. 
    Prices can vary by time (hour, half-day, full day) and type of workspace.
    """
    ESPACE_CHOICES = [
        ('bureau_individuel', 'Bureau individuel'),
        ('bureau_2_5', 'Bureau 2-5 personnes'),
        ('open_space', 'Open Space'),
        ('salle_reunion', 'Salle de réunion'),
    ]

    DUREE_CHOICES = [
        ('heure', 'Heure'),
        ('demi_jour', 'Demi-journée'),
        ('jour', 'Jour'),
    ]

    # espace_de_travail = models.ForeignKey(Workspace, on_delete=models.CASCADE)
    # duree = models.CharField(max_length=20, choices=DUREE_CHOICES)
    # prix = models.DecimalField(max_digits=10, decimal_places=2)  # Price for this duration
    # type_tarification = models.CharField(max_length=20, choices=[('par_salle', 'Par salle'), ('par_personne', 'Par personne')])

    def __str__(self):
        return f"{self.espace_de_travail.nom} - {self.duree} - {self.prix}€"


class Reservation(models.Model):
    STATUS_CHOICES = [
        ('Confirmed', 'Confirmed'),
        ('Cancelled', 'Cancelled'),
        ('Pending', 'Pending'),
    ]

    utilisateur = models.ForeignKey(User, on_delete=models.CASCADE)
    # date = models.DateField()
    # heure_debut = models.TimeField()
    # heure_fin = models.TimeField()
    status = models.CharField(max_length=255, choices=STATUS_CHOICES)
    workspace = models.ForeignKey(Workspace, on_delete=models.CASCADE)

    def calculer_prix(self):
        """
        Calculate the price based on duration, type of workspace, and discounts if applicable.
        """
        # tarification = Tarification.objects.get(espace_de_travail=self.workspace, duree='jour')  # For example, calculate for full day
        # prix = tarification.prix

        # # Check if the user is a premium member and apply discount
        # if hasattr(self.utilisateur, 'membrepremium'):
        #     prix -= prix * (self.utilisateur.membrepremium.remise / 100)

        return prix

    def annuler_reservation(self):
        """
        Cancel the reservation.
        """
        self.status = 'Cancelled'
        self.save()

    def __str__(self):
        return f'Reservation for {self.workspace} by {self.utilisateur}'


class Payment(models.Model):
    payment_status_choices = [
        ('Completed', 'Completed'),
        ('Pending', 'Pending'),
        ('Refunded', 'Refunded'),
    ]

    payment_status = models.CharField(max_length=255, choices=payment_status_choices)
    reservation = models.OneToOneField(Reservation, on_delete=models.CASCADE)
    # montant = models.DecimalField(max_digits=10, decimal_places=2)

    def traiter_paiement(self):
        self.payment_status = 'Completed'
        self.save()

    def rembourser(self):
        self.payment_status = 'Refunded'
        self.save()

    def __str__(self):
        return f"Paiement {self.id} - {self.montant}€ - {self.payment_status}"
